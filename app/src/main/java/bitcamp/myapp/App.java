/*
 * This source file was generated by the Gradle 'init' task
 */
package bitcamp.myapp;

import bitcamp.myapp.command.*;
import bitcamp.myapp.util.ArrayList;
import bitcamp.myapp.util.LinkedList;
import bitcamp.myapp.util.List;
import bitcamp.myapp.util.Prompt;

import java.util.HashMap;
import java.util.Map;


public class App {

  String[] mainMenus = {"회원", "프로젝트", "게시판", "도움말", "종료"};

  Map<String, Command> commandMap = new HashMap<>();

  public App() {
    List userList = new ArrayList();
    List boardList = new LinkedList();
    List projectList = new LinkedList();

    UserCommand userCommand = new UserCommand("회원", userList);
    commandMap.put("userCommand", userCommand);
    commandMap.put("boardCommand", new BoardCommand("게시판", boardList));
    commandMap.put("projectCommand", new ProjectCommand("프로젝트", projectList, userList));
    commandMap.put("helpCommand", new HelpCommand("도움말"));
  }

  public static void main(String[] args) {
    new App().execute();
  }

  void execute() {
    printMenu();

    String command;
    while (true) {
      try {
        command = Prompt.input("메인>");

        if (command.equals("menu")) {
          printMenu();

        } else {
          int menuNo = Integer.parseInt(command);
          String menuTitle = getMenuTitle(menuNo, mainMenus);

          if (menuTitle == null) {
            System.out.println("올바른 메뉴 번호가 아닙니다.");
          } else if (menuTitle.equals("종료")) {
            break;
          } else {
            processMenu(menuTitle);
          }
        }

      } catch (NumberFormatException e) {
        System.out.println("메뉴를 숫자로 입력하세요.");
      }
    }
    System.out.println("종료합니다.");
    Prompt.close();
  }


  void printMenu() {
    String bold = "\u001B[1m";
    String red = "\u001B[31m";
    String reset = "\u001B[0m";

    String appTitle = "[팀 프로젝트 관리 시스템]";
    String line = "--------------------------------------------";

    System.out.println(bold + line + reset);
    System.out.println(bold + appTitle + reset);
    for (int i = 0; i < mainMenus.length; i++) {
      if (i == mainMenus.length - 1) {
        System.out.printf("%s%s%d. %s%s\n", bold, red, i + 1, mainMenus[i], reset);
      } else {
        System.out.printf("%d. %s\n", i + 1, mainMenus[i]);
      }
    }
    System.out.println(bold + line + reset);
  }

  boolean isValidateMenu(int menuNo, String[] menus) {
    return menuNo >= 1 && menuNo <= menus.length;
  }

  String getMenuTitle(int menuNo, String[] menus) {
    return isValidateMenu(menuNo, menus) ? menus[menuNo - 1] : null;
  }

  void processMenu(String menuTitle) {
    Command command = commandMap.get(menuTitle);
    if (command == null) {
      System.out.printf("%s 메뉴의 명령을 처리할 수 없습니다.\n", menuTitle);
      return;
    }
    command.execute();
  }

}
